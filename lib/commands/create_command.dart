import 'package:saasfork_cli/utils/extensions/string_extension.dart';

import '../constants/packages.dart';
import '../constants/templates.dart';
import '../services/package_service.dart';
import '../services/project_service.dart';
import '../services/template_service.dart';

/// Ex√©cute la commande de cr√©ation d'un nouveau projet Flutter
Future<void> runCreateCommand(
  String projectName, {
  String? sourceFolderPath,
  bool isDev = false,
}) async {
  // Instancier les services n√©cessaires
  final packageService = PackageService();
  final templateService = TemplateService();
  final projectService = ProjectService();

  // Assurer que le nom du projet est en snake_case
  final projectNameSnakeCase = projectName.toSnakeCase();
  final projectNamePascal = projectNameSnakeCase.toPascalCase();

  // Afficher le mode de cr√©ation
  print(
    'üöÄ Cr√©ation du projet $projectNameSnakeCase ${isDev ? "en mode d√©veloppement" : ""}',
  );

  try {
    // Cr√©er le projet Flutter
    final projectCreated = await projectService.createFlutterProject(
      projectNameSnakeCase,
    );
    if (!projectCreated) return;

    // Obtenir le chemin du projet
    final projectPath = projectService.getProjectPath(projectNameSnakeCase);
    final libDir = projectService.getLibDirectory(projectPath);

    // G√©n√©rer un nouveau pubspec.yaml valide
    await projectService.generateValidPubspec(
      projectPath,
      projectNameSnakeCase,
    );

    // Configurer pour les fichiers de localisation
    await projectService.configurePubspecForLocalizations(projectPath);

    // G√©n√©rer tous les fichiers de template
    await templateService.generateAllTemplates(
      libDir,
      templateGenerators,
      projectNamePascal,
      isDev: isDev,
    );

    // G√©n√©rer les fichiers de traduction et cr√©er le r√©pertoire l10n
    await templateService.generateTranslationFiles(
      projectPath,
      translateGenerators,
      isDev: isDev,
    );

    // Copier les autres templates
    final templateDir = await projectService.findTemplateDirectory();
    if (templateDir != null) {
      await templateService.copyAdditionalTemplates(
        templateDir,
        libDir,
        projectNamePascal,
        templateGenerators,
        isDev: isDev,
      );
    }

    // Installer les packages standard seulement apr√®s avoir cr√©√© les fichiers de localisation
    await packageService.installPackages(
      defaultPackages,
      projectPath: projectPath,
    );

    // Installer les packages de d√©veloppement
    await packageService.installPackages(
      devPackages,
      projectPath: projectPath,
      isDev: true,
    );

    if (isDev) {
      await projectService.updatePubspecWithLocalPackages(projectPath);
    }

    // Ex√©cuter build_runner
    await packageService.runBuildRunner(projectPath);

    // G√©n√©ration des fichiers de localisation
    await packageService.generateLocalizations(projectPath);

    // Message de fin
    print('‚úÖ Projet cr√©√© avec succ√®s ${isDev ? "en mode d√©veloppement" : ""}');
  } catch (e) {
    print('‚ùå Erreur lors de la cr√©ation du projet:');
    print(e);
  }
}
